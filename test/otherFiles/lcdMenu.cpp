/**************************************************************************
  This is a library for several Adafruit displays based on ST77* drivers.

  Works with the Adafruit 1.8" TFT Breakout w/SD card
    ----> http://www.adafruit.com/products/358
  The 1.8" TFT shield
    ----> https://www.adafruit.com/product/802
  The 1.44" TFT breakout
    ----> https://www.adafruit.com/product/2088
  The 1.14" TFT breakout
  ----> https://www.adafruit.com/product/4383
  The 1.3" TFT breakout
  ----> https://www.adafruit.com/product/4313
  The 1.54" TFT breakout
    ----> https://www.adafruit.com/product/3787
  The 1.69" TFT breakout
    ----> https://www.adafruit.com/product/5206
  The 2.0" TFT breakout
    ----> https://www.adafruit.com/product/4311
  as well as Adafruit raw 1.8" TFT display
    ----> http://www.adafruit.com/products/618

  Check out the links above for our tutorials and wiring diagrams.
  These displays use SPI to communicate, 4 or 5 pins are required to
  interface (RST is optional).

  Adafruit invests time and resources providing this open source code,
  please support Adafruit and open-source hardware by purchasing
  products from Adafruit!

  Written by Limor Fried/Ladyada for Adafruit Industries.
  MIT license, all text above must be included in any redistribution
 **************************************************************************/

#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_ST7735.h> // Hardware-specific library for ST7735
#include <Adafruit_ST7789.h> // Hardware-specific library for ST7789
#include <SPI.h>

//ESP32 -WROOM-32
  #define TFT_CS         5
  #define TFT_RST        16
  #define TFT_DC         17
  #define TFT_MOSI       23
  #define TFT_SCLK       18

void testdrawtext(char *text, uint16_t color);
void tftPrintTest();
void testlines(uint16_t color);
void testfastlines(uint16_t color1, uint16_t color2);
void testdrawrects(uint16_t color);
void testfillrects(uint16_t color1, uint16_t color2);
void testfillcircles(uint8_t radius, uint16_t color);
void testdrawcircles(uint8_t radius, uint16_t color);
void testroundrects();
void testtriangles();
void mediabuttons();

// OPTION 1 (recommended) is to use the HARDWARE SPI pins, which are unique
// to each board and not reassignable. For Arduino Uno: MOSI = pin 11 and
// SCLK = pin 13. This is the fastest mode of operation and is required if
// using the breakout board's microSD card.

// For 1.44" and 1.8" TFT with ST7735 use:
//Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_RST);

// For 1.14", 1.3", 1.54", 1.69", and 2.0" TFT with ST7789:
Adafruit_ST7789 tft = Adafruit_ST7789(TFT_CS, TFT_DC, TFT_RST);


// OPTION 2 lets you interface the display using ANY TWO or THREE PINS,
// tradeoff being that performance is not as fast as hardware SPI above.
//#define TFT_MOSI 11  // Data out
//#define TFT_SCLK 13  // Clock out

// For ST7735-based displays, we will use this call
//Adafruit_ST7735 tft = Adafruit_ST7735(TFT_CS, TFT_DC, TFT_MOSI, TFT_SCLK, TFT_RST);

// OR for the ST7789-based displays, we will use this call
//Adafruit_ST7789 tft = Adafruit_ST7789(TFT_CS, TFT_DC, TFT_MOSI, TFT_SCLK, TFT_RST);

// 'download', 320x240px
// 'mari', 200x200px
// 'mari', 200x200px
// 'mari', 200x200px
// 'mari', 200x200px
// 'mari', 200x200px
const uint16_t implantBitmap [] PROGMEM = {
	0xffff, 0xffff, 0xffff, 0xffdf, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffdf, 0xffff, 0xffff, 0xffff, 0xffff, 0xffdf, 0xf75d, 0xdedb, 0xde9a, 0xdeba, 0xef1c, 0xf79e, 0xffdf, 0xffff, 0xffff, 0xffdf, 0xf7df, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xf79e, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffdf, 0xffff, 0xffff, 0xef5d, 0xc5f7, 0x9c91, 0x736d, 0x5a8a, 0x4a08, 0x41e7, 0x41e7, 0x4a07, 0x5269, 0x7b8e, 0xb554, 0xdeba, 0xffff, 0xffff, 0xffff, 0xf7be, 0xf7de, 0xffff, 0xffff, 0xffdf, 
0xffff, 0xffff, 0xffff, 0xffdf, 0xffdf, 0xffff, 0xffff, 0xf7be, 0xffff, 0xe6fb, 0xb575, 0x736d, 0x41e7, 0x3965, 0x3965, 0x3124, 0x2924, 0x3124, 0x3165, 0x3165, 0x3124, 0x2904, 0x3145, 0x41c6, 0x736d, 0xc5d6, 0xffde, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffdf, 0xffff, 0xffff, 0xf79e, 0xffff, 0xffbe, 0xc5f7, 0x736d, 0x3985, 0x3985, 0x41a6, 0x3965, 0x3944, 0x4185, 0x41c6, 0x4186, 0x3985, 0x41a6, 0x49e7, 0x49e7, 0x49e7, 0x49e7, 0x3985, 0x41e6, 0x8c2f, 0xe6fb, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xf7df, 0xffff, 0xffff, 0xffff, 0xf75c, 0x9c92, 0x41e6, 0x4a28, 0x4a07, 0x3985, 0x3124, 0x41a5, 0x49c6, 0x4185, 0x49c6, 0x49e7, 0x5207, 0x5228, 0x5248, 0x5228, 0x5228, 0x5228, 0x5227, 0x5248, 0x3985, 0x62aa, 0xce38, 0xffdf, 0xf7bf, 0xffff, 
0xffff, 0xffff, 0xffff, 0xf7be, 0xffff, 0xef5c, 0x83ce, 0x41c6, 0x5269, 0x3965, 0x2903, 0x3965, 0x41a5, 0x3985, 0x41c6, 0x5207, 0x5207, 0x5207, 0x5207, 0x49e7, 0x49e7, 0x5207, 0x5a48, 0x5a89, 0x5a89, 0x5a89, 0x62ca, 0x5248, 0x5a69, 0xb555, 0xffff, 0xffdf, 
0xffbf, 0xffff, 0xffff, 0xffff, 0xef7d, 0x83ef, 0x41a6, 0x6269, 0x39a6, 0x3145, 0x3965, 0x41c6, 0x49c7, 0x49e6, 0x49e6, 0x49c6, 0x41a6, 0x41c6, 0x49c7, 0x49e7, 0x5208, 0x5228, 0x5228, 0x5228, 0x5a89, 0x5a49, 0x62aa, 0x6aca, 0x5228, 0x5aaa, 0xb554, 0xffdf, 
0xffff, 0xffff, 0xf7df, 0xffff, 0x9491, 0x41c6, 0x628a, 0x3945, 0x3124, 0x3145, 0x41a6, 0x41c6, 0x41a6, 0x41c6, 0x49e7, 0x41c6, 0x49c7, 0x49e7, 0x49e7, 0x49c7, 0x41c7, 0x41c7, 0x49c7, 0x49e7, 0x41c6, 0x6aca, 0x5a69, 0x6289, 0x734c, 0x5228, 0x5a89, 0xc5f6, 
0xffff, 0xf7be, 0xffff, 0xc5d6, 0x49e7, 0x5a48, 0x39a5, 0x3144, 0x3124, 0x41c6, 0x39a6, 0x3966, 0x49c7, 0x41c6, 0x3184, 0x31e4, 0x4186, 0x3984, 0x39a4, 0x41a5, 0x49a6, 0x51a7, 0x51c7, 0x49a6, 0x41a6, 0x49e7, 0x5249, 0x628a, 0x62aa, 0x62aa, 0x62aa, 0x62aa, 
0xf7ff, 0xf7be, 0xf77d, 0x734c, 0x49e7, 0x49e7, 0x3144, 0x3144, 0x3124, 0x3965, 0x3124, 0x3104, 0x4166, 0x3965, 0x3184, 0x3a05, 0x3285, 0x3aa5, 0x3ae6, 0x3a85, 0x31c4, 0x3184, 0x39a5, 0x39c6, 0x28c3, 0x3124, 0x41a6, 0x5a49, 0x62aa, 0x62aa, 0x62aa, 0x62aa, 
0xf7ff, 0xffff, 0xbdb6, 0x3965, 0x49e7, 0x3944, 0x3103, 0x3144, 0x3944, 0x3144, 0x2903, 0x3104, 0x3965, 0x3944, 0x3184, 0x4226, 0x2620, 0x2e21, 0x35c3, 0x34a4, 0x2b03, 0x29c4, 0x3986, 0x4167, 0x2903, 0x3104, 0x3945, 0x41c7, 0x5228, 0x5a69, 0x628a, 0x62aa, 
0xffff, 0xffff, 0x6b2c, 0x3986, 0x49c6, 0x28c3, 0x3104, 0x3145, 0x3945, 0x3145, 0x3124, 0x3145, 0x4165, 0x3945, 0x3164, 0x39c5, 0x30e4, 0x3104, 0x3164, 0x3164, 0x3123, 0x3104, 0x3944, 0x3964, 0x4186, 0x3965, 0x3945, 0x3965, 0x41a6, 0x49e7, 0x5a49, 0x62aa, 
0xffff, 0xdeba, 0x41c6, 0x49e7, 0x3124, 0x28c2, 0x3124, 0x2904, 0x3104, 0x3145, 0x3145, 0x3145, 0x3945, 0x3945, 0x3144, 0x2944, 0x4125, 0x3904, 0x3143, 0x3944, 0x3924, 0x4145, 0x4145, 0x3944, 0x3945, 0x3965, 0x3965, 0x3985, 0x3986, 0x41a6, 0x4a07, 0x5a49, 
0xffff, 0xa4f3, 0x41c7, 0x3965, 0x28a2, 0x3104, 0x3144, 0x2904, 0x3104, 0x3144, 0x3145, 0x3124, 0x3124, 0x3944, 0x3944, 0x3144, 0x4146, 0x3945, 0x3164, 0x3164, 0x3144, 0x3145, 0x3144, 0x3143, 0x3144, 0x3945, 0x3965, 0x3986, 0x3965, 0x3986, 0x49c7, 0x5208, 
0xffff, 0x83ef, 0x49e7, 0x28e3, 0x3103, 0x3924, 0x3124, 0x3124, 0x3925, 0x3124, 0x3144, 0x3165, 0x3944, 0x3945, 0x3965, 0x3965, 0x3905, 0x3124, 0x3164, 0x3184, 0x3144, 0x3145, 0x3965, 0x3185, 0x3965, 0x3965, 0x3985, 0x3985, 0x3965, 0x3986, 0x41c7, 0x5208, 
0xffbe, 0x7bae, 0x3985, 0x28a2, 0x4185, 0x3104, 0x3104, 0x3145, 0x3945, 0x3124, 0x3144, 0x3986, 0x3965, 0x3945, 0x3965, 0x3985, 0x4146, 0x3944, 0x3964, 0x3964, 0x3945, 0x4145, 0x4165, 0x3944, 0x3945, 0x3965, 0x3965, 0x41a6, 0x41a6, 0x41a6, 0x41c7, 0x49e7, 
0xef7d, 0x632b, 0x3144, 0x28e3, 0x3945, 0x3965, 0x3945, 0x3145, 0x3965, 0x3965, 0x3945, 0x3945, 0x3965, 0x3965, 0x3965, 0x3985, 0x2903, 0x3124, 0x3144, 0x3944, 0x3945, 0x3965, 0x3985, 0x3965, 0x3965, 0x3965, 0x3985, 0x4185, 0x41a6, 0x41a6, 0x41c6, 0x49c6, 
0xef7d, 0x62eb, 0x3144, 0x2903, 0x3944, 0x3965, 0x3945, 0x3965, 0x3945, 0x3965, 0x3965, 0x3985, 0x3985, 0x3965, 0x3945, 0x3124, 0x3965, 0x3945, 0x3945, 0x3965, 0x3965, 0x3965, 0x3985, 0x3985, 0x3985, 0x3985, 0x4185, 0x4186, 0x41a6, 0x41a6, 0x41c6, 0x49c7, 
0xf79d, 0x5aea, 0x3124, 0x3103, 0x3944, 0x3965, 0x3945, 0x3986, 0x3965, 0x3965, 0x3985, 0x4186, 0x41a6, 0x4185, 0x3945, 0x3124, 0x41a6, 0x3965, 0x3945, 0x3965, 0x3985, 0x3985, 0x4185, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41c6, 0x49c7, 0x49c7, 
0xffde, 0x632b, 0x2924, 0x3124, 0x3945, 0x4186, 0x3945, 0x3986, 0x4186, 0x3985, 0x3985, 0x4186, 0x41a6, 0x41a6, 0x3965, 0x3144, 0x4186, 0x3945, 0x3144, 0x3985, 0x41a6, 0x4186, 0x41a6, 0x49c6, 0x41a6, 0x41a6, 0x41a6, 0x41c6, 0x49c6, 0x49c7, 0x49e7, 0x49e7, 
0xffff, 0x738d, 0x2923, 0x2903, 0x3945, 0x41a6, 0x3965, 0x3986, 0x41a6, 0x4186, 0x4185, 0x41a6, 0x41a6, 0x41a6, 0x3965, 0x3144, 0x4185, 0x3944, 0x3944, 0x4186, 0x41c6, 0x41a6, 0x41a6, 0x49c6, 0x41c6, 0x41c6, 0x41c6, 0x49c6, 0x49c7, 0x49e7, 0x49e7, 0x49e7, 
0xffff, 0x8c50, 0x2924, 0x28e3, 0x3944, 0x41a6, 0x3986, 0x3986, 0x4186, 0x4186, 0x41a6, 0x41a6, 0x41c6, 0x41a6, 0x3965, 0x3124, 0x41a6, 0x3985, 0x4185, 0x41c6, 0x49c7, 0x41c6, 0x41a6, 0x41c6, 0x41c6, 0x41c6, 0x49c6, 0x49c7, 0x49e7, 0x49e7, 0x49e7, 0x49e7, 
0xffff, 0xad54, 0x3965, 0x28e3, 0x3144, 0x3965, 0x4186, 0x3986, 0x4185, 0x4186, 0x41a6, 0x41a6, 0x41c6, 0x41a6, 0x3985, 0x3965, 0x41a6, 0x41a6, 0x41a6, 0x41c6, 0x49c6, 0x41c6, 0x41c6, 0x41c6, 0x41a6, 0x41c6, 0x41c6, 0x49c7, 0x49e7, 0x49e7, 0x49e7, 0x49e7, 
0xffff, 0xc617, 0x41c6, 0x2903, 0x3144, 0x3944, 0x41a6, 0x3986, 0x41a6, 0x4186, 0x41a6, 0x41a6, 0x41a6, 0x41c6, 0x49c6, 0x49c7, 0x41a6, 0x41a6, 0x41c6, 0x41a6, 0x41a6, 0x49c6, 0x49c6, 0x41c6, 0x41a6, 0x41a6, 0x41c6, 0x49c7, 0x49e7, 0x49e7, 0x49e7, 0x49e7, 
0xffff, 0xef3c, 0x5249, 0x28c3, 0x3104, 0x3124, 0x41c6, 0x3165, 0x4186, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41c6, 0x41c6, 0x41c6, 0x41c6, 0x41c6, 0x49e7, 0x41c6, 0x49c6, 0x49c7, 0x49c7, 0x4a07, 0x49e7, 
0xffff, 0xffbe, 0x8c10, 0x20a2, 0x3104, 0x3124, 0x3965, 0x3985, 0x4186, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41c6, 0x41c6, 0x41c6, 0x41c6, 0x41a6, 0x49e7, 0x49c7, 0x41c6, 0x49e7, 0x49c6, 0x49e7, 
0xffff, 0xffff, 0xc5f7, 0x2904, 0x3104, 0x3104, 0x3124, 0x3985, 0x4185, 0x4186, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41c6, 0x41c6, 0x41c6, 0x41c6, 0x41c6, 0x41c6, 0x49e7, 0x49c6, 0x49c7, 0x49e7, 0x49c6, 
0xffff, 0xffdf, 0xef3c, 0x62aa, 0x2904, 0x3104, 0x3944, 0x3965, 0x3985, 0x4185, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41c6, 0x41c6, 0x41c6, 0x49e7, 0x3985, 0x49e7, 0x4a07, 0x41c6, 0x49e7, 0x3144, 
0xffff, 0xffdf, 0xffdf, 0xad14, 0x3124, 0x20c2, 0x3965, 0x3945, 0x3965, 0x3985, 0x4186, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41c6, 0x41c6, 0x41c6, 0x41c6, 0x41c6, 0x49e7, 0x49c7, 0x3144, 0x2903, 
0xffff, 0xffff, 0xffff, 0xe6fb, 0x5a69, 0x20a2, 0x3124, 0x3924, 0x3965, 0x3965, 0x4185, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x49e7, 0x3965, 0x5228, 0x41a6, 0x41c6, 0x41c6, 0x20a2, 0x5248, 
0xffff, 0xffff, 0xffff, 0xffbe, 0xad34, 0x41a6, 0x28e3, 0x3104, 0x3944, 0x3965, 0x3985, 0x4186, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x49c6, 0x3985, 0x5207, 0x41a6, 0x41a6, 0x3144, 0x41a6, 0xb554, 
0xffff, 0xffff, 0xffdf, 0xffdf, 0xffdf, 0x6b0c, 0x30e4, 0x3104, 0x3144, 0x3965, 0x3985, 0x4185, 0x4186, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x4a07, 0x3965, 0x41c6, 0x41a6, 0x20a2, 0x732c, 0xffff, 
0xffff, 0xffff, 0xffff, 0xf7de, 0xffff, 0xd659, 0x5228, 0x28c3, 0x3145, 0x3145, 0x3144, 0x3145, 0x3986, 0x39a6, 0x3985, 0x3985, 0x4186, 0x4186, 0x4186, 0x4186, 0x41a6, 0x49a6, 0x49a6, 0x41a6, 0x41a6, 0x3985, 0x3985, 0x39a6, 0x20e3, 0x41c6, 0xe6db, 0xffff, 
0xffbf, 0xffdf, 0xffff, 0xffff, 0xffff, 0xffff, 0xb555, 0x41a6, 0x1882, 0x2903, 0x3985, 0x41a6, 0x3985, 0x3985, 0x39a6, 0x41a6, 0x3985, 0x4185, 0x4186, 0x4186, 0x41a6, 0x41a6, 0x41a6, 0x41a6, 0x3964, 0x3985, 0x4a07, 0x2903, 0x1881, 0xce38, 0xffde, 0xffde, 
0xffff, 0xffff, 0xffff, 0xffff, 0xf7be, 0xffff, 0xffde, 0x9cb2, 0x41a6, 0x2903, 0x2903, 0x3965, 0x3945, 0x3944, 0x3965, 0x3965, 0x39a5, 0x3985, 0x3985, 0x3985, 0x3965, 0x3985, 0x3985, 0x39a5, 0x41a6, 0x3965, 0x28e3, 0x1881, 0xad34, 0xffff, 0xffde, 0xffff, 
0xffff, 0xffff, 0xf7de, 0xffff, 0xf7ff, 0xf7be, 0xffff, 0xf79d, 0x9410, 0x41c7, 0x1881, 0x2903, 0x3965, 0x3985, 0x4185, 0x3944, 0x3964, 0x3964, 0x3965, 0x3985, 0x3985, 0x3965, 0x3985, 0x3985, 0x3944, 0x1881, 0x20a2, 0x9c91, 0xffff, 0xf7be, 0xffff, 0xffff, 
0xffdf, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xf73c, 0x9471, 0x4a07, 0x28e3, 0x1882, 0x20a2, 0x28e3, 0x28e3, 0x28e3, 0x28e3, 0x3103, 0x3104, 0x28e3, 0x20a2, 0x2082, 0x20a2, 0x1882, 0x41c6, 0x9c91, 0xffff, 0xf7be, 0xffff, 0xffff, 0xffff, 
0xffff, 0xf7be, 0xffff, 0xffff, 0xffff, 0xffff, 0xffdf, 0xffff, 0xffff, 0xef5d, 0xbd95, 0x736d, 0x41a6, 0x3124, 0x3144, 0x2903, 0x3124, 0x2904, 0x28e3, 0x28e3, 0x28e3, 0x2904, 0x3965, 0x49c7, 0x734d, 0xc5f7, 0xffff, 0xf79e, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xf7be, 0xffff, 0xffff, 0xffdf, 0xffdf, 0xffff, 0xffff, 0xf7be, 0xffff, 0xffff, 0xe71c, 0xc5f7, 0xad34, 0x9c92, 0x8c10, 0x83ef, 0x83cf, 0x83cf, 0x8410, 0x8c30, 0x9c92, 0xb555, 0xc5f7, 0xef7d, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 
0xffff, 0xffff, 0xffff, 0xffdf, 0xffff, 0xffff, 0xffff, 0xffdf, 0xffff, 0xffff, 0xffdf, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffff, 0xffdf, 0xffff, 0xffff, 0xffff, 0xf79d, 0xffff, 0xffff, 0xf7be, 0xffff, 0xffff, 0xffff

};

const uint16_t spBitmap[] PROGMEM = {

};

float p = 3.1415926;

void setup(void) {
  Serial.begin(9600);
  Serial.print(F("Hello! ST77xx TFT Test"));

  // Use this initializer if using a 1.8" TFT screen:
  //tft.initR(INITR_BLACKTAB);      // Init ST7735S chip, black tab

  // OR use this initializer if using a 1.8" TFT screen with offset such as WaveShare:
  // tft.initR(INITR_GREENTAB);      // Init ST7735S chip, green tab

  // OR use this initializer (uncomment) if using a 1.44" TFT:
  //tft.initR(INITR_144GREENTAB); // Init ST7735R chip, green tab

  // OR use this initializer (uncomment) if using a 0.96" 160x80 TFT:
  //tft.initR(INITR_MINI160x80);  // Init ST7735S mini display
  // OR use this initializer (uncomment) if using a 0.96" 160x80 TFT with 
  // plug-in FPC (if you see the display is inverted!)
  //tft.initR(INITR_MINI160x80_PLUGIN);  // Init ST7735S mini display

  // OR use this initializer (uncomment) if using a 1.3" or 1.54" 240x240 TFT:
  //tft.init(240, 240);           // Init ST7789 240x240

  // OR use this initializer (uncomment) if using a 1.69" 280x240 TFT:
  //tft.init(240, 280);           // Init ST7789 280x240

  // OR use this initializer (uncomment) if using a 2.0" 320x240 TFT:
  tft.init(240, 320);           // Init ST7789 320x240

  // OR use this initializer (uncomment) if using a 1.14" 240x135 TFT:
  //tft.init(135, 240);           // Init ST7789 240x135
  
  // OR use this initializer (uncomment) if using a 1.47" 172x320 TFT:
  //tft.init(172, 320);           // Init ST7789 172x320

  // SPI speed defaults to SPI_DEFAULT_FREQ defined in the library, you can override it here
  // Note that speed allowable depends on chip and quality of wiring, if you go too fast, you
  // may end up with a black screen some times, or all the time.
  //tft.setSPISpeed(40000000);

  Serial.println(F("Initialized"));

  uint16_t time = millis();
  tft.fillScreen(ST77XX_BLACK);
  time = millis() - time;

  Serial.println(time, DEC);

  /*
  delay(500);

  // large block of text
  tft.fillScreen(ST77XX_BLACK);
  testdrawtext("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Curabitur adipiscing ante sed nibh tincidunt feugiat. Maecenas enim massa, fringilla sed malesuada et, malesuada sit amet turpis. Sed porttitor neque ut ante pretium vitae malesuada nunc bibendum. Nullam aliquet ultrices massa eu hendrerit. Ut sed nisi lorem. In vestibulum purus a tortor imperdiet posuere. ", ST77XX_WHITE);
  delay(1000);

  // tft print function!
  tftPrintTest();
  delay(4000);

  // a single pixel
  tft.drawPixel(tft.width()/2, tft.height()/2, ST77XX_GREEN);
  delay(500);

  // line draw test
  testlines(ST77XX_YELLOW);
  delay(500);

  // optimized lines
  testfastlines(ST77XX_RED, ST77XX_BLUE);
  delay(500);

  testdrawrects(ST77XX_GREEN);
  delay(500);

  testfillrects(ST77XX_YELLOW, ST77XX_MAGENTA);
  delay(500);

  tft.fillScreen(ST77XX_BLACK);
  testfillcircles(10, ST77XX_BLUE);
  testdrawcircles(10, ST77XX_WHITE);
  delay(500);

  testroundrects();
  delay(500);

  testtriangles();
  delay(500);

  mediabuttons();
  delay(500);

  Serial.println("done");
  delay(1000);
  */
    tft.fillScreen(ST77XX_BLACK);
    tft.setCursor(0,30);
    tft.setTextColor(ST77XX_RED);
    tft.setTextSize(1);
    tft.println("Hello World!");

    //using image2cpp to get the bitmap code

    tft.fillScreen(ST77XX_BLACK);
    //tft.setRotation(1); //apply rotation before the object
    //tft.drawBitmap(0,0, epd_bitmap_mari,200, 200, ST77XX_WHITE);  //works with Hozizontal - 1 bit per pixel, works for 8 bit monochrom images
    tft.drawRGBBitmap(0,0, spBitmap, 32, 40);  //works for 16-bit rgb images
}

void loop() {
    /*
    tft.invertDisplay(true);
    delay(500);
    tft.invertDisplay(false);
    delay(500);
    */
    

}

void displayImplantRotation(){
    //get a bitmap showing the the two circles (implant and sp)
    //show the angle difference from the starting point
}

void testlines(uint16_t color) {
  tft.fillScreen(ST77XX_BLACK);
  for (int16_t x=0; x < tft.width(); x+=6) {
    tft.drawLine(0, 0, x, tft.height()-1, color);
    delay(0);
  }
  for (int16_t y=0; y < tft.height(); y+=6) {
    tft.drawLine(0, 0, tft.width()-1, y, color);
    delay(0);
  }

  tft.fillScreen(ST77XX_BLACK);
  for (int16_t x=0; x < tft.width(); x+=6) {
    tft.drawLine(tft.width()-1, 0, x, tft.height()-1, color);
    delay(0);
  }
  for (int16_t y=0; y < tft.height(); y+=6) {
    tft.drawLine(tft.width()-1, 0, 0, y, color);
    delay(0);
  }

  tft.fillScreen(ST77XX_BLACK);
  for (int16_t x=0; x < tft.width(); x+=6) {
    tft.drawLine(0, tft.height()-1, x, 0, color);
    delay(0);
  }
  for (int16_t y=0; y < tft.height(); y+=6) {
    tft.drawLine(0, tft.height()-1, tft.width()-1, y, color);
    delay(0);
  }

  tft.fillScreen(ST77XX_BLACK);
  for (int16_t x=0; x < tft.width(); x+=6) {
    tft.drawLine(tft.width()-1, tft.height()-1, x, 0, color);
    delay(0);
  }
  for (int16_t y=0; y < tft.height(); y+=6) {
    tft.drawLine(tft.width()-1, tft.height()-1, 0, y, color);
    delay(0);
  }
}

void testdrawtext(char *text, uint16_t color) {
  tft.setCursor(0, 0);
  tft.setTextColor(color);
  tft.setTextWrap(true);
  tft.print(text);
}

void testfastlines(uint16_t color1, uint16_t color2) {
  tft.fillScreen(ST77XX_BLACK);
  for (int16_t y=0; y < tft.height(); y+=5) {
    tft.drawFastHLine(0, y, tft.width(), color1);
  }
  for (int16_t x=0; x < tft.width(); x+=5) {
    tft.drawFastVLine(x, 0, tft.height(), color2);
  }
}

void testdrawrects(uint16_t color) {
  tft.fillScreen(ST77XX_BLACK);
  for (int16_t x=0; x < tft.width(); x+=6) {
    tft.drawRect(tft.width()/2 -x/2, tft.height()/2 -x/2 , x, x, color);
  }
}

void testfillrects(uint16_t color1, uint16_t color2) {
  tft.fillScreen(ST77XX_BLACK);
  for (int16_t x=tft.width()-1; x > 6; x-=6) {
    tft.fillRect(tft.width()/2 -x/2, tft.height()/2 -x/2 , x, x, color1);
    tft.drawRect(tft.width()/2 -x/2, tft.height()/2 -x/2 , x, x, color2);
  }
}

void testfillcircles(uint8_t radius, uint16_t color) {
  for (int16_t x=radius; x < tft.width(); x+=radius*2) {
    for (int16_t y=radius; y < tft.height(); y+=radius*2) {
      tft.fillCircle(x, y, radius, color);
    }
  }
}

void testdrawcircles(uint8_t radius, uint16_t color) {
  for (int16_t x=0; x < tft.width()+radius; x+=radius*2) {
    for (int16_t y=0; y < tft.height()+radius; y+=radius*2) {
      tft.drawCircle(x, y, radius, color);
    }
  }
}

void testtriangles() {
  tft.fillScreen(ST77XX_BLACK);
  uint16_t color = 0xF800;
  int t;
  int w = tft.width()/2;
  int x = tft.height()-1;
  int y = 0;
  int z = tft.width();
  for(t = 0 ; t <= 15; t++) {
    tft.drawTriangle(w, y, y, x, z, x, color);
    x-=4;
    y+=4;
    z-=4;
    color+=100;
  }
}

void testroundrects() {
  tft.fillScreen(ST77XX_BLACK);
  uint16_t color = 100;
  int i;
  int t;
  for(t = 0 ; t <= 4; t+=1) {
    int x = 0;
    int y = 0;
    int w = tft.width()-2;
    int h = tft.height()-2;
    for(i = 0 ; i <= 16; i+=1) {
      tft.drawRoundRect(x, y, w, h, 5, color);
      x+=2;
      y+=3;
      w-=4;
      h-=6;
      color+=1100;
    }
    color+=100;
  }
}

void tftPrintTest() {
  tft.setTextWrap(false);
  tft.fillScreen(ST77XX_BLACK);
  tft.setCursor(0, 30);
  tft.setTextColor(ST77XX_RED);
  tft.setTextSize(1);
  tft.println("Hello World!");
  tft.setTextColor(ST77XX_YELLOW);
  tft.setTextSize(2);
  tft.println("Hello World!");
  tft.setTextColor(ST77XX_GREEN);
  tft.setTextSize(3);
  tft.println("Hello World!");
  tft.setTextColor(ST77XX_BLUE);
  tft.setTextSize(4);
  tft.print(1234.567);
  delay(1500);
  tft.setCursor(0, 0);
  tft.fillScreen(ST77XX_BLACK);
  tft.setTextColor(ST77XX_WHITE);
  tft.setTextSize(0);
  tft.println("Hello World!");
  tft.setTextSize(1);
  tft.setTextColor(ST77XX_GREEN);
  tft.print(p, 6);
  tft.println(" Want pi?");
  tft.println(" ");
  tft.print(8675309, HEX); // print 8,675,309 out in HEX!
  tft.println(" Print HEX!");
  tft.println(" ");
  tft.setTextColor(ST77XX_WHITE);
  tft.println("Sketch has been");
  tft.println("running for: ");
  tft.setTextColor(ST77XX_MAGENTA);
  tft.print(millis() / 1000);
  tft.setTextColor(ST77XX_WHITE);
  tft.print(" seconds.");
}

void mediabuttons() {
  // play
  tft.fillScreen(ST77XX_BLACK);
  tft.fillRoundRect(25, 10, 78, 60, 8, ST77XX_WHITE);
  tft.fillTriangle(42, 20, 42, 60, 90, 40, ST77XX_RED);
  delay(500);
  // pause
  tft.fillRoundRect(25, 90, 78, 60, 8, ST77XX_WHITE);
  tft.fillRoundRect(39, 98, 20, 45, 5, ST77XX_GREEN);
  tft.fillRoundRect(69, 98, 20, 45, 5, ST77XX_GREEN);
  delay(500);
  // play color
  tft.fillTriangle(42, 20, 42, 60, 90, 40, ST77XX_BLUE);
  delay(50);
  // pause color
  tft.fillRoundRect(39, 98, 20, 45, 5, ST77XX_RED);
  tft.fillRoundRect(69, 98, 20, 45, 5, ST77XX_RED);
  // play color
  tft.fillTriangle(42, 20, 42, 60, 90, 40, ST77XX_GREEN);
}

